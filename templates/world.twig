{% extends "layout_fs.twig" %}

{% block title %}Le monde{% endblock title %}
       
{% block style %}

	    <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet-1.0.3/leaflet.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/L.Control.MousePosition.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/L.Control.Window.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet.draw/leaflet.draw.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/Control.MiniMap.min.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet-fullscreen/Control.FullScreen.css" />
        
		<style>		
		
		body {
 		   padding: 0;
    	   margin: 0;
		}
		html, body, #map {
    		height: 100vh;
    		width: 100vw;
		}


			
			#content {
				padding: 0px;
				margin: 0px;
			}
			
			.navbar {
				margin-bottom: 0px;
			}
			
			#aide {
				font-style: italic;
				color: green;
			}
			
			.leaflet-control-window .title {
				color: #000;
			}
			
			.mapbox {
			    position: relative;
			}

			.mapbox .overlay {
			    position: absolute;
			    top: 0;
			    left: 0;
			    z-index: 314159;
			    pointer-events: none;
			}
			
			.mapbox .overlay .btn {
			    pointer-events: initial;
			}
												
			.territoire, .fief, .region, .itineraire, .route, .fortification {
				padding: 6px 8px;
				font: 14px/16px Arial, Helvetica, sans-serif;
				background: white;
				background: rgba(255,255,255,0.8);
				box-shadow: 0 0 15px rgba(0,0,0,0.2);
				border-radius: 5px;
				width: 300px;
			}
			
			#description {
				z-index: 314160;
			}
			
			.info  {
				padding: 6px 8px;
				font: 14px/16px Arial, Helvetica, sans-serif;
			}
			
			.info h4, .territoire h4, .region h4, .fief h4, .itineraire h4, .route h4, .fortification h4 {
				margin: 0 0 5px;
				color: #777;
			}
			
			.geom {
				display: none;
			}
			
			.leaflet-draw-toolbar .leaflet-draw-draw-territoire {
				background-position: -31px -2px;
			}
			
			.leaflet-draw-toolbar .leaflet-draw-draw-fief {
				background-position: -31px -2px;
			}
			
			.leaflet-draw-toolbar .leaflet-draw-draw-route {
				background-position: 0 -1px;
			}
			
			.leaflet-draw-toolbar .leaflet-draw-draw-itineraire {
				background-position: 0 -1px;
			}

			.leaflet-draw-toolbar .leaflet-draw-draw-fortification {
				background-position: -122px -2px;
			}
			
			.leaflet-touch .leaflet-draw-toolbar .leaflet-draw-draw-fortification {
				background-position: -120px -1px;
			}

			label {
				margin-bottom: 0px;
			}
			
			/* remove label background elements */
			.leaflet-tooltip.my-labels {
			  background-color: transparent;
			  border: transparent;
			  box-shadow: none;
			  font-weight: bold;
			  font-size: 20px;
			}
		</style>
{% endblock %}

{% block content %}
<div class="clearfix">
	<div class="mapbox">
		<div class="row-fluid some" id="map"></div>
	</div> 		
</div>
{% endblock %}

{% block javascript %}

<script src="{{ app.request.basepath }}/leaflet-1.0.3/leaflet.js"></script>
<script src="{{ app.request.basepath }}/leaflet/L.Control.MousePosition.js"></script>
<script src="{{ app.request.basepath }}/leaflet/L.Control.Window.js"></script>
<script src="{{ app.request.basepath }}/leaflet-fullscreen/Control.FullScreen.js"></script>
<script src="{{ app.request.basepath }}/leaflet-pattern/leaflet-pattern.js"></script>

<script src="{{ app.request.basepath }}/leaflet.draw/Leaflet.draw.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/Leaflet.Draw.Event.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/Control.Draw.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/Toolbar.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/Tooltip.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/draw/handler/Draw.Feature.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/draw/handler/Draw.Marker.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/draw/handler/Draw.Polyline.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/draw/handler/Draw.Polygon.js"></script>
<script src="{{ app.request.basepath }}/leaflet.draw/draw/DrawToolbar.js"></script>

<script src="{{ app.request.basepath }}/leaflet/Control.MiniMap.min.js"></script>
<script src="{{ app.request.basepath }}/leaflet/spin.min.js"></script>
<script src="{{ app.request.basepath }}/leaflet/leaflet.spin.min.js"></script>
<script src="{{ app.request.basepath }}/js/randomColor.min.js"></script>
<script src="{{ app.request.basepath }}/turf/turf-3.0.11.min.js"></script>


<script>


	var cartographie = {
			// Url du tileset
			mapUrl: 'img/map/{z}/{x}/{y}.png',

			mapCleanUrl: 'img/map_clean/{z}/{x}/{y}.png',
			
			// Zoom minimal
			mapMinZoom: 2,
				
			// zoom maximal affiché
			mapMaxZoom : 5,
			
			// zoom maximal fichiers
			mapMaxZ : 6,

			// zoom au chargement de la carte
			mapNormalZoom: 3,
			
			// Liste des pays	
			countriesList : Object(),

			// Liste des régions	
			regionsList : Object(),

			// Liste des fiefs  	
			fiefsList : Object(),

			// Liste des groupes
			groupeList : Object(),

			// liste des langues
			langueList : Object(),

			// Collection des geometries des pays		
			countriesGeom: null,
			countriesLabelLayer : null,
			data_points : null,

			// Collection des geometries des régions		
			regionsGeom: null,

			// Collection des geometries des fiefs
			fiefsGeom: null,

			// Collection des geometries des groupes
			//groupesGeom: null,

			// Collection des geometries des langues
			//languesGeom: null,
			languesOverlay: Object(),

			// Tilelayer de base
			baseTileLayer: null,

			// Tilelayer de travail
			workingTileLayer: null,

			// Tilelayer de la minimap
			minimapLayer: null,

			// carte
			map: null,

			// fenêtre modale
			descriptionWin : null,

			// bouton fullscreen
			fsControl : null,

			// limites de la carte
			mapBounds : null,	

			// Panneau de sauvegarde d'une geometrie de territoire
			saveTerritoirePanel : null,
			saveTerritoirePanelDiv: null,

			// Panneau de sauvegarde d'une geometrie de territoire
			saveRegionPanel : null,
			saveRegionPanelDiv: null,
			
			// Panneau de sauvegarde d'une geometrie de territoire
			saveFiefPanel : null,
			saveFiefPanelDiv: null,

			// Panneau de sauvegarde d'une geometrie de territoire
			saveRoutePanel : null,
			saveRoutePanelDiv: null,

			// Panneau de calcul de distance & itineraire
			itinerairePanel: null,
			itinerairePanelDiv: null,

			// Panneau de sauvegarde d'une geometrie de territoire
			saveFortificationPanel : null,
			saveFortificationPanelDiv: null,						

			// Geometrie courante
			currentGeom : null,

			// Collection des geometrie dessiné
			drawnItems : null,

			// icone particulieres
			ownGroupIcon : null,

			languagePattern : null,

			// Création de la carte
			createMap: function() {
				this.map = L.map('map', {
					  maxZoom: this.mapMaxZoom,
					  minZoom: this.mapMinZoom,
					  zoom: 3,
					  crs: L.CRS.Simple,
					  detectRetina: true,
					  infinite: false,
					});

				this.map.createPane('labels');
				this.map.getPane('labels').style.zIndex = 650;
				this.map.getPane('labels').style.pointerEvents = 'none';
				
				this.map.spin(true);

				this.ownGroupIcon = L.icon({
					iconUrl: '{{ app.request.basepath }}/img/star_gold_48.png',
					iconSize:     [48, 48], // size of the icon
				    iconAnchor:   [24, 24], // point of the icon which will correspond to marker's location
				    popupAnchor:  [-48, 96] // point from which the popup should open relative to the iconAnchor
				});

				this.data_points = {
				    "type": "FeatureCollection",
				    "name": "test-points-short-named",
				    "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
				    "features": []
				};

				this.languagePattern = new L.StripePattern({
					'color': 'red',
					'spaceWeight': 10,
					'angle': 45,
					'opacity': 1,
					});
				
				this.descriptionWin = L.control.window(map,{title:'Hello world!',content:'This is my first control window.'})
			},
			
			// Création des limites de la carte
			createMapBounds: function() {
				this.mapBounds = new L.LatLngBounds(
						this.map.unproject([1,11535], this.mapMaxZ),
						this.map.unproject([16383,1], this.mapMaxZ)	    
					);
				this.map.setMaxBounds(this.mapBounds);
			},
			
			// Création du tileLayer de base
			createBaseTileLayer : function() {
				
				this.baseTileLayer = L.tileLayer(this.mapUrl, {
					minZoom: this.mapMinZoom, 
			        maxZoom: this.mapMaxZoom,
			        bounds: this.mapBounds,
			        attribution: 'Rendered with <a href="http://www.gdal.org/gdal2tiles.html">Gdal2Tile</a> | Icons made by <a href="http://www.freepik.com" title="Freepik">Freepik</a> from <a href="http://www.flaticon.com" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a>',
			        tms: false,
			        continuousWorld: true,
			        noWrap: false,
			        tilesize:255,
			        crs: L.CRS.Simple,
			        detectRetina: false
				}).addTo(this.map);
			},

			// Création du tileLayer de base
			createWorkingTileLayer : function() {
				
				this.workingTileLayer = L.tileLayer(this.mapCleanUrl, {
					minZoom: this.mapMinZoom, 
			        maxZoom: this.mapMaxZoom,
			        bounds: this.mapBounds,
			        attribution: 'Rendered with <a href="http://www.gdal.org/gdal2tiles.html">Gdal2Tile</a> | Icons made by <a href="http://www.freepik.com" title="Freepik">Freepik</a> from <a href="http://www.flaticon.com" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a>',
			        tms: false,
			        continuousWorld: true,
			        noWrap: false,
			        tilesize:255,
			        crs: L.CRS.Simple,
			        detectRetina: false
				}).addTo(this.map);
			},

			createMinimapLayer : function() {
				
				this.minimapLayer = L.tileLayer(this.mapCleanUrl, {
					minZoom: this.mapMinZoom, 
			        maxZoom: this.mapMaxZoom,
			        bounds: this.mapBounds,
			        attribution: 'Rendered with <a href="http://www.gdal.org/gdal2tiles.html">Gdal2Tile</a> | Icons made by <a href="http://www.freepik.com" title="Freepik">Freepik</a> from <a href="http://www.flaticon.com" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a>',
			        tms: false,
			        continuousWorld: true,
			        noWrap: false,
			        tilesize:255,
			        crs: L.CRS.Simple,
			        detectRetina: false
				});
			},

			// Applique les limites de la carte à la carte
			fitMap: function() {
				this.map.fitBounds(this.mapBounds);
				var _mapCenter = this.map.unproject([16384/2, 11536/2], this.mapMaxZ);
				this.map.setView(_mapCenter, this.mapNormalZoom);
			},

			// méthode déclenchée pour toute nouvelle geometrie
			// Permet de lier des événements à une géométrie
			onEachFeature: function(feature, layer) {
			    if (feature.properties ) {
				    
			        layer.on({
				        mouseover: cartographie.mouseOver,
					    mouseout: cartographie.mouseOut,
					    click: cartographie.mouseClick,
				    });
			    }
			},

			// evenement click sur une geometrie
			mouseClick: function(e) {
				var layer = e.target;
				cartographie.displayInfoPanel(layer.feature.properties);
			},
			
			// evenement mouseover sur une geometrie
			mouseOver: function(e) {
				var layer = e.target;
				layer.setStyle({ 'fillColor' : 'red'});
			},
			
			// evenement mouseout sur une geometrie
			mouseOut: function(e) {
				var layer = e.target;
				layer.setStyle({ 'fillColor' : layer.feature.properties.color});
			},

			// création du bouton fullscreen
			// il est possible d'utiliser les événements enterFullscreen & exitFullscreen lié à l'objet map
			// map.on('enterFullscreen', function(){});
			createFullScreenControl: function() {
				// create fullscreen control
				this.fsControl = new L.Control.FullScreen();
				// add fullscreen control to the map
				this.map.addControl(this.fsControl);
			},

			// Création du control calques
			// permet de choisir quel calque est affiché
			createCalquesControl: function() {
				this.calquesControl = L.control({position: 'bottomright'});
				this.calquesControl.onAdd = function (map) {
					L.DomEvent.on
					var div = L.DomUtil.create('div', 'leaflet-control-layers');
					div.innerHTML +=
						'';
					return div;
				};

				this.calquesControl.onRemove = function (map) {
				};
			},

			// Création de la légende Instable
			createDesordreLegend: function() {
				this.desordreLegend = L.control({position: 'bottomright'});
				
				this.desordreLegend.onAdd = function (map) {
				    var div = L.DomUtil.create('div', 'leaflet-control-layers'), // create a div with a class "info"
				    	grades = [0, 1],
			        	labels = ['Normal', 'Instable'];
				    for (var i = 0; i < grades.length; i++) {
				        div.innerHTML +=
				            '<i style="color: #000;background-color:' + cartographie.getDesordreColor(grades[i]) + '">'+labels[i]+'</i><br/>';
				    }
				    return div;
				};
			},

			// Création de la légende religion
			createLangueLegend: function() {
				this.langueLegend = L.control({position: 'bottomright'});
				
				this.langueLegend.onAdd = function (map) {
				    var div = L.DomUtil.create('div', 'info legend'), // create a div with a class "info"
				    	grades = [0, 1, 2],
		        		labels = [];
				    for (var i = 0; i < grades.length; i++) {
				        div.innerHTML +=
				            '<i style="background:' + cartographie.getDesordreColor(grades[i] + 1) + '"></i> ' +
				            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
				    }
				    return div;
				};
			},
			
			// Creation des controles de dessins
			createDrawControl: function() {

				L.Draw.Territoire = L.Draw.Polygon.extend({
					 initialize: function (map, options) {
						 L.Draw.Polygon.prototype.initialize.call(this, map, options);
				          this.type = 'territoire';
				      }
				});
				
				L.Draw.Region = L.Draw.Polygon.extend({
					 initialize: function (map, options) {
						 L.Draw.Polygon.prototype.initialize.call(this, map, options);
				          this.type = 'region';
				      }
				});
				
				L.Draw.Fief = L.Draw.Polygon.extend({
					 initialize: function (map, options) {
						 L.Draw.Polygon.prototype.initialize.call(this, map, options);
				          this.type = 'fief';
				      }
				});

				L.Draw.Ville = L.Draw.Marker.extend({
					initialize: function (map, options) {
						 L.Draw.Marker.prototype.initialize.call(this, map, options);
				          this.type = 'ville';
				      }
				});

				L.Draw.Itineraire = L.Draw.Polyline.extend({
					 initialize: function (map, options) {
						 L.Draw.Polyline.prototype.initialize.call(this, map, options);
				         this.type = 'itineraire';
				      }
				});
				
				L.Draw.Route = L.Draw.Polyline.extend({
					 initialize: function (map, options) {
						 L.Draw.Polyline.prototype.initialize.call(this, map, options);
				          this.type = 'route';
				      }
				});
				
				L.Draw.Fortification = L.Draw.Marker.extend({
					 initialize: function (map, options) {
						 L.Draw.Marker.prototype.initialize.call(this, map, options);
				          this.type = 'fortification';
				      }
				});
			
				var FortificationMarker = L.Icon.extend({
				    options: {
				        shadowUrl: null,
				        iconAnchor: new L.Point(12, 12),
				        iconSize: new L.Point(32, 32),
				        iconUrl: 'img/buildings.svg'
				    }
				});

				
				L.DrawToolbar.include({
				    getModeHandlers: function (map) {
				        return [
				            {
				                enabled: true,
				                handler: new L.Draw.Territoire(map),
				                title: 'Tracer un territoire'
				            },
				            {
				                enabled: true,
				                handler: new L.Draw.Region(map),
				                title: 'Tracer une région'
				            },
				            {
				                enabled: true,
				                handler: new L.Draw.Fief(map),
				                title: 'Tracer un fief'
				            },
				            {
				                enabled: true,
				                handler: new L.Draw.Itineraire(map, {
				                	shapeOptions: {
				                		weight: 6,
				                		color: '#3d86c2',	
				                		opacity: 0.8,
				                	},
					                showLength: false}),
				                title: 'Calculer un itineraire'
				            },
				            {
				                enabled: true,
				                handler: new L.Draw.Route(map),
				                title: 'Tracer une route commerciale'
				            },
				            {
				                enabled: true,
				                handler: new L.Draw.Fortification(map, {icon: new FortificationMarker}),
				                title: 'Placer une fortification'
				            }
				        ];
				    }
				});
				
				this.drawControl = new L.Control.Draw({
				    edit: {
				        featureGroup: this.drawnItems
				    },
				    draw: {
					    polygon: {
					    	shapeOptions: {
				                color: '#bada55'
				            }
						}
				    }
				});
			},			
			
			// Création des collections de geometries
			createGeomCollection: function() {
				this.countriesGeom = new L.geoJson(false, {style: this.territoireStyle, onEachFeature: this.onEachFeature});
				
				this.countriesLabelLayer = new L.geoJson(null, {
						pointToLayer: function(feature,latlng){
						    label = String(feature.properties.name) // .bindTooltip can't use straight 'feature.properties.attribute'
						    return new L.CircleMarker(latlng, {
						      radius: 0.1,
						    }).bindTooltip(label, {permanent: true, direction: "center", className: "my-labels"}).openTooltip();
						    }
						  });				
				this.regionsGeom = new L.geoJson(false, {style: this.regionStyle, onEachFeature: this.onEachFeature});
				this.fiefsGeom = new L.geoJson(false, {style: this.fiefStyle, onEachFeature: this.onEachFeature});
				//this.groupesGeom = new L.layerGroup();
				//this.languesGeom = new L.layerGroup();
				this.routesGeom = new L.geoJson(false, {onEachFeature: this.onEachFeature});
				this.fortificationsGeom = new L.geoJson(false, {onEachFeature: this.onEachFeature});
				this.drawnItems = new L.FeatureGroup();
			},

			// style des territoires
			territoireStyle: function(feature) {
				if ( feature.properties.color == null) {
					feature.properties.color = randomColor({luminosity:'dark'});
				}
				return {
	                weight: 5,
	                opacity: 0,
	                color: feature.properties.color,
	                dashArray: '10',
	                fillOpacity: 0.2,
	                fillColor: feature.properties.color
	            };
			},

			// style des territoires
			regionStyle: function(feature) {
				if ( feature.properties.color == null) {
					feature.properties.color = randomColor({luminosity:'dark'});
				}
				return {
	                weight: 3,
	                opacity: 1,
	                color: feature.properties.color,
	                dashArray: '7',
	                fillOpacity: 0.2,
	                fillColor: feature.properties.color
	            };
			},
			
			// style des fiefs
			fiefStyle: function(feature){
				if ( feature.properties.color == null) {
					feature.properties.color = randomColor({luminosity:'dark'});
				}
				return {
	                weight: 2,
	                opacity: 1,
	                color: feature.properties.color,
	                dashArray: '3',
	                fillOpacity: 0.2,
	                fillColor: feature.properties.color
	            };
			},

			// style des langues
			langueStyle: function(feature) {
				feature.properties.color = randomColor({luminosity:'dark'});
				return {
	                weight: 2,
	                opacity: 1,
	                color: feature.properties.color,
	                dashArray: '3',
	                fillOpacity: 0.2,
	                fillColor: feature.properties.color
	            };
			},

			// Affecte une couleur en fonction du degres de stabilité
			getDesordreColor: function(d) {
			    return d == 2 ? '#800026' :
			           d == 1  ? '#F4A460' :
			           d == 0  ? '#00B030' :
			                      '#00B030';
			},

			// style des territoires (affichage de la stabilité)
			desordreStyle: function(feature) {
			    return {
			        fillColor: this.getDesordreColor(feature.properties.desordre),
			        weight: 2,
			        opacity: 1,
			        color: 'white',
			        dashArray: '3',
			        fillOpacity: 0.7
			    };
			},
						


			// Affichage des informations concernant le layer selectionné
			displayInfoPanel: function(props)
			{
				var detailLink = "{{ app.request.basepath }}/territoire/"+props.id+"/joueur";
				var editLink = "{{ app.request.basepath }}/territoire/"+props.id+"/update";
			    var editStrategieLink = "{{ app.request.basepath }}/territoire/"+props.id+"/updateStrategie";
			    			     			        
				if ( props && ! props.description ) props.description = 'Aucune description';

				this.descriptionWin.title(props.name);
				var content = '<a href="'+detailLink+'">Voir le descriptif détaillé</a><hr />' + props.description ;
				{% if is_granted('ROLE_ORGA', app.user) %}
					content = content + '<br /><a href="'+editLink+'">Modifier</a>'
				        		+'<br /><a href="'+editStrategieLink+'">Jeu stratégique</a>';
				{% endif %}
				this.descriptionWin.content(content);
				this.descriptionWin.show('topRight');
			},

			// Création du pannel de sauvegarde d'une geometrie territoire
			createSaveTerritoirePanel: function() {
				this.saveTerritoirePanel = L.control();
				this.saveTerritoirePanel.onAdd = function(map) {
					cartographie.saveTerritoirePanelDiv = L.DomUtil.create('div', 'territoire');
					cartographie.saveTerritoirePanelDiv.innerHTML = '';
					$(cartographie.saveTerritoirePanelDiv).hide();
					this.currentGeom = null;
					return cartographie.saveTerritoirePanelDiv;
				};
			},

			// Création du pannel de sauvegarde d'une geometrie region
			createSaveRegionPanel: function() {
				this.saveRegionPanel = L.control();
				this.saveRegionPanel.onAdd = function(map) {
					cartographie.saveRegionPanelDiv = L.DomUtil.create('div', 'region');
					cartographie.saveRegionPanelDiv.innerHTML = '';
					$(cartographie.saveRegionPanelDiv).hide();
					this.currentGeom = null;
					return cartographie.saveRegionPanelDiv;
				};
			},

			// Création du pannel de sauvegarde d'une geometrie fief
			createSaveFiefPanel: function() {
				this.saveFiefPanel = L.control();
				this.saveFiefPanel.onAdd = function(map) {
					cartographie.saveFiefPanelDiv = L.DomUtil.create('div', 'fief');
					cartographie.saveFiefPanelDiv.innerHTML = '';
					$(cartographie.saveFiefPanelDiv).hide();
					this.currentGeom = null;
					return cartographie.saveFiefPanelDiv;
				};
			},

			// Création du panneau itineraire et distance
			createItinerairePanel: function() {
				this.itinerairePanel = L.control({'position':'bottomleft'});
				this.itinerairePanel.onAdd = function(map) {
					cartographie.itinerairePanelDiv = L.DomUtil.create('div','itineraire');
					cartographie.itinerairePanelDiv.innerHTML = '';
					$(cartographie.itinerairePanelDiv).hide();
					this.currentGeom = null;
					return cartographie.itinerairePanelDiv;
				};
			},

			// Création du pannel de sauvegarde d'une geometrie route
			createSaveRoutePanel: function() {
				this.saveRoutePanel = L.control();
				this.saveRoutePanel.onAdd = function(map) {
					cartographie.saveRoutePanelDiv = L.DomUtil.create('div', 'route');
					cartographie.saveRoutePanelDiv.innerHTML = '';
					$(cartographie.saveRoutePanelDiv).hide();
					this.currentGeom = null;
					return cartographie.saveRoutePanelDiv;
				};
			},

			// Création du pannel de sauvegarde d'une geometrie fortification
			createSaveFortificationPanel: function() {
				this.saveFortificationPanel = L.control();
				this.saveFortificationPanel.onAdd = function(map) {
					cartographie.saveFortificationPanelDiv = L.DomUtil.create('div', 'fortification');
					cartographie.saveFortificationPanelDiv.innerHTML = '';
					$(cartographie.saveFortificationPanelDiv).hide();
					this.currentGeom = null;
					return cartographie.saveFortificationPanelDiv;
				};
			},
			
			// Affiche le panneau de sauvegarde d'une geometrie territorie
			displaySaveTerritoirePanel: function(geom) {
					this.currentGeom = geom;
					var select = '<label>Choisissez le territoire : </label>';
					select = select + '<select id="selectedCountry">';
					for(var key in this.countriesList)
					{
						select = select + '<option value="'+this.countriesList[key].id+'">'+this.countriesList[key].name+'</option>'
					}
					select = select +  '</select>';
					select = select + '<input type="submit" value="Sauver" onclick="cartographie.saveTerritoire()"/>'
					
					cartographie.saveTerritoirePanelDiv.innerHTML = select;			
					
					$(cartographie.saveTerritoirePanelDiv).show();
			},

			// Affiche le panneau de sauvegarde d'une geometrie territorie
			displaySaveRegionPanel: function(geom) {
					this.currentGeom = geom;
					var select = '<label>Choisissez la region : </label>';
					select = select + '<select id="selectedRegion">';
					for(var key in this.regionsList)
					{
						select = select + '<option value="'+this.regionsList[key].id+'">'+this.regionsList[key].name+'</option>'
					}
					select = select +  '</select>';
					select = select + '<input type="submit" value="Sauver" onclick="cartographie.saveRegion()"/>'
					
					cartographie.saveRegionPanelDiv.innerHTML = select;			
					
					$(cartographie.saveRegionPanelDiv).show();
			},
			
			// Affiche le panneau de sauvegarde d'une geometrie territorie
			displaySaveFiefPanel: function(geom) {
					this.currentGeom = geom;
					var select = '<label>Choisissez le fief : </label>';
					select = select + '<select id="selectedFief">';
					for(var key in this.fiefsList)
					{
						select = select + '<option value="'+this.fiefsList[key].id+'">'+this.fiefsList[key].name+'</option>'
					}
					select = select +  '</select>';
					select = select + '<input type="submit" value="Sauver" onclick="cartographie.saveFief()"/>'
					
					cartographie.saveFiefPanelDiv.innerHTML = select;			
					
					$(cartographie.saveFiefPanelDiv).show();
			},

			// calcul de la distance entre deux points
			distance: function(latlngs) {
				if ( latlngs.length <= 1) return 0;
				var refPoint = latlngs[0];
				var distanceTotal = 0;
				
				for (i=1; i< latlngs.length; i++) 
				{
					var Ay = (refPoint.lat *  -11536) / 180;
					var Ax = (refPoint.lng * 16384) / 255;

					var By = (latlngs[i].lat *  -11536) / 180;
					var Bx = (latlngs[i].lng * 16384) / 255;
					
					var distance = Math.sqrt(Math.pow(Bx - Ax,2) + Math.pow(By - Ay,2));
					
					distanceTotal += distance;
					refPoint = latlngs[i];
				}
				distanceTotal *= 1386.47; 
				return distanceTotal;
			},

			// calcul le temps necessaire pour parcourir une distance en fonction du type de moyen de transport
			calculTemps: function(distance, transport, heureParJour)
			{
				var heure = 0, jour = 0;
				switch(transport) {
					case "0": // pied 5km/heure
						heure = Math.round(distance / 5);
						break;
					case "1": // cheval 15km/heure
						heure = Math.round(distance / 15);
						break;
					case "2": // cavalerie normal 6.25Km/heure
						heure = Math.round(distance / 6.25);
						break;
					case "3": // cavalerie forcée 9.4Km/heure
						heure = Math.round(distance / 9.4);
						break;
					case "4": // cavalerie bagage 3km/heure
						heure = Math.round(distance / 3);
						break;
					case "5": // infanterie normale 2.5km/heure
						heure = Math.round(distance / 2.5);
						break;
					case "6": // infanterie forcée 5km/h
						heure = Math.round(distance / 5);
						break;
				}

				if ( heure > heureParJour ) {
					jour = Math.round(heure / heureParJour);
					heure = heure % heureParJour;
				}

				var text = '';
				if ( jour > 0 ) text = jour+" jour(s) et ";
				if ( heure == 0 ) text += "moins d'une heure";
				else text += heure + " heures";
				
				$('#tempsVoyage').text(text);
			},
			
			// Affiche le panneau de calcul du temps de voyage
			displayItinerairePanel: function(layer)
			{
				var distance = this.distance(layer._latlngs);
				distance = Math.round((distance / 2000)*100)/100;
				var select = '<h4>Détail de votre itineraire</h4>';
				select += '<strong>Distance :</strong><br /><span style="color:green">' + distance + ' Km'+'</span><br />';
				select += '<label>Moyen de transport</label>'
					+ '<select id="selectTempsVoyage">'
					+ '<option value="0">Pied</option>'
					+ '<option value="1">Cheval</option>'
					+ '<option value="2">Cavalerie (Marche normale)</option>'
					+ '<option value="3">Cavalerie (Marche forcée)</option>'
					+ '<option value="4">Cavalerie (Bagages)</option>'
					+ '<option value="5">Infanterie (Marche normale)</option>'
					+ '<option value="6">Infanterie (Marche forcée)</option>'
					+ '</select>'
					+ '<label>Durée de la journée</label>'
					+ '<input type="number" id="heureParJour" value="8" size="2"></input><br />'
					+ '<strong>Durée du voyage</strong><br />'
					+ '<div id="tempsVoyage" style="color:green;"></div>'
					+ '<a href="#" onclick="cartographie.closeItinerairePanel()" style="float: right;">Fermer</a>';
					
				cartographie.itinerairePanelDiv.innerHTML = select;
				$(cartographie.itinerairePanelDiv).show();

				cartographie.calculTemps(distance, $("#selectTempsVoyage").val(), 8);

				$('#heureParJour').change(function() {
					var heureParJour = $(this).val();
					cartographie.calculTemps(distance, $('#selectTempsVoyage').val(), heureParJour);
				});
				
				$('#selectTempsVoyage').change(function() {
					var heureParJour = $("#heureParJour").val();
					cartographie.calculTemps(distance, $(this).val(), heureParJour);
				});
			},

			// Ferme le panneau itineraire
			closeItinerairePanel: function()
			{
				cartographie.itinerairePanelDiv.innerHtml = "";
				$(cartographie.itinerairePanelDiv).hide();
			},
			
			// Affiche le panneau de sauvegarde d'une geometrie territorie
			displaySaveRoutePanel: function(geom) {
					this.currentGeom = geom;
					var select = '<p>Non disponible</p>';
					cartographie.saveRoutePanelDiv.innerHTML = select;			
					
					$(cartographie.saveRoutePanelDiv).show();
			},

			// Affiche le panneau de sauvegarde d'une geometrie territorie
			displaySaveFortificationPanel: function(geom) {
				this.currentGeom = geom;
				var select = '<p>Non disponible</p>';
				cartographie.saveFortificationPanelDiv.innerHTML = select;			
				
				$(cartographie.saveFortificationPanelDiv).show();
			},

			// Chargement des pays
			// Les geometries sont stocké dans les collections correspondates
			// La liste des pays est mise à jour
			loadCountries: function() {
				$.ajax({
					dataType: "json",
					url: "world/countries.json",
					success: function(data) {
					    $(data).each(function(key, country) {
						    if ( country.geom != null )
						    {
						    	var geom = JSON.parse(country.geom);
						    	geom.properties.name = country.name;  	
						    	geom.properties.description = country.description;
						    	geom.properties.color = country.color;
						    	geom.properties.id = country.id;
						    	geom.properties.groupes = country.groupes;
						    	geom.properties.desordre = country.desordre;
						    	cartographie.countriesGeom.addData(geom);						    	
						    }
						    
						    cartographie.countriesList[country.id] = country;
						    cartographie.map.spin(false);
					    });
					}
					}).error(function() {
						cartographie.map.spin(false);
					});
			},

			// Chargement des pays
			// Les geometries sont stocké dans les collections correspondates
			// La liste des pays est mise à jour
			loadRegions: function() {
				$.ajax({
					dataType: "json",
					url: "world/regions.json",
					success: function(data) {
					    $(data).each(function(key, country) {
						    if ( country.geom != null )
						    {
						    	var geom = JSON.parse(country.geom);
						    	geom.properties.name = country.name;  	
						    	geom.properties.description = country.description;
						    	geom.properties.color = country.color;
						    	geom.properties.id = country.id;
						    	geom.properties.groupes = country.groupes;
						    	geom.properties.desordre = country.desordre;
						    	cartographie.regionsGeom.addData(geom);
						    }
						    
						    cartographie.regionsList[country.id] = country;
					    });
					}
					}).error(function() {});
			},

			// Chargement des fiefs
			// Les geometries sont stocké dans les collections correspondates
			// La liste des fiefs est mise à jour
			loadFiefs: function() {
			
				$.ajax({
					dataType: "json",
					url: "world/fiefs.json",
					success: function(data) {
					    $(data).each(function(key, country) {
						    if ( country.geom != null )
						    {
						    	var geom = JSON.parse(country.geom);
						    	geom.properties.name = country.name;  	
						    	geom.properties.description = country.description;
						    	geom.properties.color = country.color;
						    	geom.properties.id = country.id;
						    	geom.properties.groupes = country.groupes;
						    	geom.properties.desordre = country.desordre;
						    	cartographie.fiefsGeom.addData(geom);
						    }
	
						    cartographie.fiefsList[country.id] = country;
					    });
					}
					}).error(function() {});
			},

			// Chargement des groupes
			loadGroupes: function() {
				$.ajax({
					dataType: 'json',
					url: 'world/groupes.json',
					success: function(data) {
						
						$(data).each(function(key, groupe) {
							// trouve le centre du territoire
							
							if ( groupe.geom != null )
							{
								geom = L.geoJson(JSON.parse(groupe.geom));
								var bounds = geom.getBounds();
								var latLng = bounds.getCenter();
								if ( groupe.highlight == true )
								{
									marker = L.marker(latLng,{'icon':cartographie.ownGroupIcon}).bindTooltip(groupe.nom,{'pane':'labels'}).openTooltip();
								}
								else
								{
									marker = L.marker(latLng).bindTooltip(groupe.nom,{'pane':'labels'}).openTooltip();
								}
								//cartographie.groupesGeom.addLayer(marker);
							}
							cartographie.groupeList[groupe.id] = groupe;
							
						});
						
					}
				}).error(function() {});
			},

			/*loadLangues: function() {
					$.ajax({
						dataType: 'json',
						url: 'world/langues.json',
						success: function(data) {
							$(data).each(function(key, langue) {
								if ( langue.geomPrincipalCount > 0)
								{							
									color = randomColor({luminosity:'dark'});
									geom = L.geoJSON(JSON.parse(langue.geomPrincipal), {
										style: function(feature) {
											return {
												'weight': 0,
								                'opacity': 0,
												'color': color ,
												'fillPattern': cartographie.languagePattern,
											}
										}
									});
									
									cartographie.languesOverlay[langue.label] = geom;									
								}
								cartographie.langueList[langue.id] = langue;
							});

							L.control.layers(cartographie.languesOverlay).addTo(cartographie.map);
							
						}
					}).error(function() {});
			},*/

			// sauvegarde une geometrie de territoire en base de donnee
			saveTerritoire: function() {
				var country = document.getElementById("selectedCountry");
				var territoireId = country.options[country.selectedIndex].value;
					
				$.ajax({
					type: "POST",
					dataType: 'json',
					url: "world/countries/"+territoireId+"/update",
					data: {geom: this.currentGeom, color: randomColor({luminosity: 'dark'}) },
					success: function(data) {
					    alert("la geographie a été enregistrée");
					    var geom = JSON.parse(country.geom);
				    	geom.properties.name = country.name;  	
				    	geom.properties.description = country.description;
					    this.countriesGeom.addData(geom);
					}
					}).error(function() {
						alert("désolé, une erreur est survenue");
					});
				
				cartographie.saveTerritoirePanelDiv.innerHTML = '';
				$(cartographie.saveTerritoirePanelDiv).hide();
				this.currentGeom = null;
			},

			// sauvegarde une geometrie de fief en base de donnée
			saveRegion: function() {
				var country = document.getElementById("selectedRegion");
				var territoireId = country.options[country.selectedIndex].value;
					
				$.ajax({
					type: "POST",
					dataType: 'json',
					url: "world/countries/"+territoireId+"/update",
					data: {geom: this.currentGeom, color: randomColor({luminosity: 'light'})},
					success: function(data) {
					    alert("la geographie a été enregistrée");
					    var geom = JSON.parse(country.geom);
				    	geom.properties.name = country.name;  	
				    	geom.properties.description = country.description;
					    this.regionsGeom.addData(geom);
					}
					}).error(function() {
						alert("désolé, une erreur est survenue");
					});
				
				cartographie.saveRegionPanelDiv.innerHTML = '';
				$(cartographie.saveRegionPanelDiv).hide();
				this.currentGeom = null;
			},
			
			// sauvegarde une geometrie de fief en base de donnée
			saveFief: function() {
				var country = document.getElementById("selectedFief");
				var territoireId = country.options[country.selectedIndex].value;
					
				$.ajax({
					type: "POST",
					dataType: 'json',
					url: "world/countries/"+territoireId+"/update",
					data: {geom: this.currentGeom, color: randomColor({luminosity: 'light'})},
					success: function(data) {
					    alert("la geographie a été enregistrée");
					    var geom = JSON.parse(country.geom);
				    	geom.properties.name = country.name;  	
				    	geom.properties.description = country.description;
					    this.fiefsGeom.addData(geom);
					}
					}).error(function() {
						alert("désolé, une erreur est survenue");
					});
				
				cartographie.saveFiefPanelDiv.innerHTML = '';
				$(cartographie.saveFiefPanelDiv).hide();
				this.currentGeom = null;
			},

			// Evenement création geometrie
			drawCreated: function(e) {
			    var type = e.layerType,
		        layer = e.layer;

			    if (type === 'territoire') {
					cartographie.displaySaveTerritoirePanel(JSON.stringify(layer.toGeoJSON()));
			    }
			    else if (type === 'region') {
			    	cartographie.displaySaveRegionPanel(JSON.stringify(layer.toGeoJSON()));
			    }
			    else if (type === 'fief') {
			    	cartographie.displaySaveFiefPanel(JSON.stringify(layer.toGeoJSON()));
			    }
			    else if (type === 'itineraire') {
				    cartographie.displayItinerairePanel(layer);
			    }
			    else if (type === 'route') {
			    	//cartographie.displaySaveRoutePanel(JSON.stringify(layer.toGeoJSON()));
			    }
			    else if (type === 'fortification') {
			    	//cartographie.displaySaveFortificationPanel(JSON.stringify(layer.toGeoJSON()));
			    }
				
			    layer.addTo(cartographie.drawnItems);
			    cartographie.map.addLayer(layer);
			},

			// Evenement édition geometrie
			drawEdited: function(e) {
			    var layers = e.layers;
			    layers.eachLayer(function (layer) {
			        //do whatever you want, most likely save back to db
			        //cartographie.displaySaveTerritoirePanel(JSON.stringify(layer.toGeoJSON()));
			    });
			},

			// Applique les geometries et les layers sur la carte
			applyOnMap: function() {
				this.countriesGeom.addTo(this.map);			
				
				//this.groupesGeom.addTo(this.map);

				// Options disponibles dans le controlLayer
				var baseMaps = {
					"Vide": this.workingTileLayer,
					"Base" : this.baseTileLayer
				};

				// Options disponibles dans le controlLayer
				var overlayMaps = {
					"Pays" : this.countriesGeom,
					"Regions" : this.regionsGeom,
					"Fiefs" : this.fiefsGeom,
					//"Groupes" : this.groupesGeom,
				};
				
				L.control.layers(
					baseMaps, 
					overlayMaps).addTo(this.map);
				
				L.control.mousePosition().addTo(this.map);

				L.control.minimap(this.minimapLayer).addTo(this.map);

				this.map.keyboard.enable();	

				this.map.addLayer(this.drawnItems);

				//this.languagePattern.addTo(this.map);
				
				{% if is_granted('ROLE_ORGA', app.user) %}
					this.map.addControl(this.drawControl);
				{% endif %}

				//this.map.addControl(this.desordreLegend);
				//this.map.addControl(this.langueLegend);
				
				this.saveTerritoirePanel.addTo(this.map);
				this.saveRegionPanel.addTo(this.map);
				this.saveFiefPanel.addTo(this.map);
				this.itinerairePanel.addTo(this.map);
				this.saveRoutePanel.addTo(this.map);
				this.saveFortificationPanel.addTo(this.map);

				this.map.on(L.Draw.Event.CREATED, this.drawCreated);
				this.map.on(L.Draw.Event.EDITED, this.drawEdited);
				
			},

			createLabel: function() {
				 var polygon = L.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
				 console.log(polygon);
				 var center = polygon.getCenter();
				 console.log(center);
				 this.countriesLabelLayer.addTo(this.map);
				    	
				    /*cartographie.data_points.features.push( 
				    		{ 
					    		"type": "Feature", 
					    		"properties": { "name": country.name }, 
					    		"geometry": { "type": "Point", "coordinates": center.geometry.coordinates } 
					    	});
					});
					this.countriesLabelLayer.addData(this.data_points);*/
			}
			
	};
	
	
	cartographie.createMap();
	cartographie.createMapBounds();
	cartographie.createWorkingTileLayer();
	cartographie.createMinimapLayer();
	cartographie.createBaseTileLayer();

	cartographie.fitMap();
	
	cartographie.createGeomCollection();
	cartographie.createDrawControl();
	//cartographie.createDesordreLegend();
	cartographie.createLangueLegend();
	cartographie.createFullScreenControl();
	cartographie.createSaveTerritoirePanel();
	cartographie.createSaveRegionPanel();
	cartographie.createSaveFiefPanel();
	cartographie.createItinerairePanel();
	cartographie.createSaveRoutePanel();
	cartographie.createSaveFortificationPanel();
	cartographie.loadCountries();
	cartographie.loadRegions();
	cartographie.loadFiefs();
	//cartographie.loadGroupes();
	//cartographie.loadLangues();
	
	cartographie.applyOnMap();

	cartographie.createLabel();

</script>

{% endblock %}
