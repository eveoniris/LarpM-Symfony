<?php

/**
 * LarpManager - A Live Action Role Playing Manager
 * Copyright (C) 2016 Kevin Polez.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-07-07 22:08:08.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

/**
 * App\Entity\Objet.
 *
 * @Entity(repositoryClass="LarpManager\Repository\ObjetRepository")
 */
class Objet extends BaseObjet
{
    public function __construct()
    {
        parent::__construct();
        $this->setCreationDate(new \DateTime('NOW'));
    }

    /**
     * Manage relation when clone entity.
     */
    public function __clone()
    {
        $objetCarac = $this->getObjetCarac();
        if ($objetCarac) {
            $cloneObjetCarac = clone $objetCarac;
            $this->objetCarac = $cloneObjetCarac;
            $cloneObjetCarac->setObjet($this);
        }

        $photo = $this->getPhoto();
        if ($photo) {
            $this->photo = null; // on ne clone pas la photo par comodité
        }

        $this->setCreationDate(new \DateTime('NOW'));
    }

    /**
     * Fourni un tableau pour exporter l'objet dans un fichier CSV.
     */
    public function getExportValue(): array
    {
        return [
            'nom' => ('' !== $this->getNom() && '0' !== $this->getNom()) ? $this->getNom() : '',
            'code' => ($this->getcode()) ? $this->getCode() : '',
            'description' => ('' !== $this->getDescription() && '0' !== $this->getDescription()) ? $this->getDescription() : '',
            'photo' => ($this->getPhoto()) ? $this->getPhoto()->getRealName() : '',
            'rangement' => ($this->getRangement()) ? $this->getRangement()->getAdresse() : '',
            'etat' => ($this->getEtat()) ? $this->getEtat()->getLabel() : '',
            'proprietaire' => ($this->getProprietaire()) ? $this->getProprietaire()->getNom() : '',
            'responsable' => ($this->getResponsable()) ? $this->getResponsable()->getUserName() : '',
            'nombre' => $this->getNombre(),
            'creation_date' => ($this->getCreationDate()) ? $this->getCreationDate()->format('Y-m-d H:i:s') : '',
        ];
    }

    /**
     * Fabrique le code d'un objet en fonction de son rangement et de son numéro.
     */
    public function getCode(): string
    {
        $code = '';
        if ($this->getRangement()) {
            $code .= substr($this->getRangement()->getLabel(), 0, 3);
        }

        return $code.('-'.$this->getNumero());
    }

    /**
     * Get User entity related by `responsable_id` (many to one).
     *
     * @return \App\Entity\User
     */
    public function getResponsable()
    {
        return $this->getUser();
    }

    /**
     * Set Users entity related by `responsable_id` (many to one).
     *
     * @param \App\Entity\Users $User
     *
     * @return \App\Entity\Objet
     */
    public function setResponsable(User $User = null)
    {
        return $this->setUser($User);
    }
}
