<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-annotation) on 2019-09-14 09:57:08.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\Column;
use Doctrine\ORM\Mapping\GeneratedValue;
use Doctrine\ORM\Mapping\Id;
use Doctrine\ORM\Mapping\JoinColumn;
use Doctrine\ORM\Mapping\ManyToMany;
use Doctrine\ORM\Mapping\ManyToOne;
use Doctrine\ORM\Mapping\OneToMany;
use Doctrine\ORM\Mapping\OrderBy;

#[ORM\Entity]
#[ORM\Table(name: 'competence')]
#[ORM\Index(columns: ['competence_family_id'], name: 'fk_competence_niveau_competence1_idx')]
#[ORM\Index(columns: ['level_id'], name: 'fk_competence_niveau_niveau1_idx')]
#[ORM\InheritanceType('SINGLE_TABLE')]
#[ORM\DiscriminatorColumn(name: 'discr', type: 'string')]
#[ORM\DiscriminatorMap(['base' => 'BaseCompetence', 'extended' => 'Competence'])]
class BaseCompetence
{
    #[Id, Column(type: \Doctrine\DBAL\Types\Types::INTEGER, options: ['unsigned' => true]), GeneratedValue(strategy: 'AUTO')]
    protected ?int $id = null;

    #[Column(type: \Doctrine\DBAL\Types\Types::TEXT, nullable: true)]
    protected ?string $description = null;

    #[Column(type: \Doctrine\DBAL\Types\Types::TEXT, length: 45, nullable: true)]
    protected ?string $documentUrl = null;

    #[Column(type: \Doctrine\DBAL\Types\Types::TEXT, nullable: true)]
    protected ?string $materiel = null;

    /**
     * @var \Doctrine\Common\Collections\Collection<int, \App\Entity\CompetenceAttribute>|\App\Entity\CompetenceAttribute[]
     */
    #[OneToMany(mappedBy: 'competence', targetEntity: CompetenceAttribute::class, cascade: ['all'])]
    #[JoinColumn(name: 'id', referencedColumnName: 'competence_id', nullable: 'false')]
    protected ArrayCollection $competenceAttributes;

    /**
     * @var \Doctrine\Common\Collections\Collection<int, \App\Entity\ExperienceUsage>|\App\Entity\ExperienceUsage[]
     */
    #[OneToMany(mappedBy: 'competence', targetEntity: ExperienceUsage::class, cascade: ['all'])]
    #[JoinColumn(name: 'id', referencedColumnName: 'competence_id', nullable: 'false')]
    protected ArrayCollection $experienceUsages;

    /**
     * @var \Doctrine\Common\Collections\Collection<int, \App\Entity\PersonnageSecondaireCompetence>|\App\Entity\PersonnageSecondaireCompetence[]
     */
    #[OneToMany(mappedBy: 'competence', targetEntity: PersonnageSecondaireCompetence::class, cascade: ['persist'])]
    #[JoinColumn(name: 'id', referencedColumnName: 'competence_id', nullable: 'false')]
    protected ArrayCollection $personnageSecondaireCompetences;

    #[ManyToOne(targetEntity: CompetenceFamily::class, cascade: ['persist'], inversedBy: 'competences')]
    #[JoinColumn(name: 'competence_family_id', referencedColumnName: 'id', nullable: 'false')]
    #[JoinColumn(name: 'competence_family_label', referencedColumnName: 'label', nullable: 'false')]
    #[OrderBy(['competence_family_label' => \Doctrine\Common\Collections\Criteria::ASC])]
    protected CompetenceFamily $competenceFamily;

    #[ManyToOne(targetEntity: Level::class, cascade: ['persist'], inversedBy: 'competences')]
    #[JoinColumn(name: 'level_id', referencedColumnName: 'id')]
    protected ?Level $level = null;

    #[ManyToMany(targetEntity: Personnage::class, inversedBy: 'competences')]
    #[ORM\JoinTable(
        name: 'personnages_competences',
        /* TODO check Attributes on JonTable on ManyToMany
         joinColumns: [
            ['JoinColumn' => ['name' => 'competence_id', 'referencedColumnName' => 'id', 'nullable' => false]],
        ],
        inverseJoinColumns: [
            ['JoinColumn' => ['name' => 'personnage_id', 'referencedColumnName' => 'id', 'nullable' => false]],
        ]*/
    )]
    protected ArrayCollection $personnages;

    public function __construct()
    {
        $this->competenceAttributes = new ArrayCollection();
        $this->experienceUsages = new ArrayCollection();
        $this->personnageSecondaireCompetences = new ArrayCollection();
        $this->personnages = new ArrayCollection();
    }

    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    public function getDescription(): string
    {
        return $this->description ?? '';
    }

    public function setDocumentUrl(string $documentUrl): self
    {
        $this->documentUrl = $documentUrl;

        return $this;
    }

    public function getDocumentUrl(): string
    {
        return $this->documentUrl ?? '';
    }

    public function setMateriel(string $materiel): self
    {
        $this->materiel = $materiel;

        return $this;
    }

    public function getMateriel(): string
    {
        return $this->materiel ?? '';
    }

    public function addCompetenceAttribute(CompetenceAttribute $competenceAttribute): self
    {
        $this->competenceAttributes[] = $competenceAttribute;

        return $this;
    }

    public function removeCompetenceAttribute(CompetenceAttribute $competenceAttribute): self
    {
        $this->competenceAttributes->removeElement($competenceAttribute);

        return $this;
    }

    public function getCompetenceAttributes(): ArrayCollection
    {
        return $this->competenceAttributes;
    }

    public function addExperienceUsage(ExperienceUsage $experienceUsage): self
    {
        $this->experienceUsages[] = $experienceUsage;

        return $this;
    }

    public function removeExperienceUsage(ExperienceUsage $experienceUsage): self
    {
        $this->experienceUsages->removeElement($experienceUsage);

        return $this;
    }

    public function getExperienceUsages(): ArrayCollection
    {
        return $this->experienceUsages;
    }

    public function addPersonnageSecondaireCompetence(PersonnageSecondaireCompetence $personnageSecondaireCompetence): self
    {
        $this->personnageSecondaireCompetences[] = $personnageSecondaireCompetence;

        return $this;
    }

    public function removePersonnageSecondaireCompetence(PersonnageSecondaireCompetence $personnageSecondaireCompetence): self
    {
        $this->personnageSecondaireCompetences->removeElement($personnageSecondaireCompetence);

        return $this;
    }

    public function getPersonnageSecondaireCompetences(): ArrayCollection
    {
        return $this->personnageSecondaireCompetences;
    }

    public function setCompetenceFamily(CompetenceFamily $competenceFamily = null): self
    {
        $this->competenceFamily = $competenceFamily;

        return $this;
    }

    public function getCompetenceFamily(): ?CompetenceFamily
    {
        return $this->competenceFamily;
    }

    public function setLevel(Level $level = null): self
    {
        $this->level = $level;

        return $this;
    }

    public function getLevel(): ?Level
    {
        return $this->level;
    }

    public function addPersonnage(Personnage $personnage): self
    {
        $personnage->addCompetence($this);
        $this->personnages[] = $personnage;

        return $this;
    }

    public function removePersonnage(Personnage $personnage): self
    {
        $personnage->removeCompetence($this);
        $this->personnages->removeElement($personnage);

        return $this;
    }

    public function getPersonnages(): ArrayCollection
    {
        return $this->personnages;
    }

    public function __sleep()
    {
        return ['id', 'description', 'competence_family_id', 'level_id', 'documentUrl', 'materiel'];
    }
}