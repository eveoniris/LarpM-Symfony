<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2018-03-21 17:21:06.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * App\Entity\Intrigue
 *
 * @Table(name="intrigue", indexes={@Index(name="fk_intrigue_User1_idx", columns={"User_id"})})
 * @InheritanceType("SINGLE_TABLE")
 * @DiscriminatorColumn(name="discr", type="string")
 * @DiscriminatorMap({"base":"BaseIntrigue", "extended":"Intrigue"})
 */
class BaseIntrigue
{
    /**
     * @Id
     * @Column(type="integer", options={"unsigned":true})
     * @GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @Column(type="text")
     */
    protected $description;

    /**
     * @Column(type="string", length=45)
     */
    protected $titre;

    /**
     * @Column(name="`text`", type="text")
     */
    protected $text;

    /**
     * @Column(type="text", nullable=true)
     */
    protected $resolution;

    /**
     * @Column(type="datetime")
     */
    protected $date_creation;

    /**
     * @Column(type="datetime")
     */
    protected $date_update;

    /**
     * @Column(name="`state`", type="string", length=45, nullable=true)
     */
    protected $state;

    /**
     * @OneToMany(targetEntity="IntrigueHasEvenement", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasEvenements;

    /**
     * @OneToMany(targetEntity="IntrigueHasGroupe", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasGroupes;

    /**
     * @OneToMany(targetEntity="IntrigueHasGroupeSecondaire", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasGroupeSecondaires;

    /**
     * @OneToMany(targetEntity="IntrigueHasLieu", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasLieus;

    /**
     * @OneToMany(targetEntity="IntrigueHasDocument", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasDocuments;

    /**
     * @OneToMany(targetEntity="IntrigueHasModification", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasModifications;

    /**
     * @OneToMany(targetEntity="IntrigueHasObjectif", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $intrigueHasObjectifs;

    /**
     * @OneToMany(targetEntity="Relecture", mappedBy="intrigue", cascade={"persist", "remove"})
     * @JoinColumn(name="id", referencedColumnName="intrigue_id", nullable=false)
     */
    protected $relectures;

    /**
     * @ManyToOne(targetEntity="User", inversedBy="intrigues")
     * @JoinColumn(name="User_id", referencedColumnName="id", nullable=false)
     */
    protected $User;

    public function __construct()
    {
        $this->intrigueHasEvenements = new ArrayCollection();
        $this->intrigueHasGroupes = new ArrayCollection();
        $this->intrigueHasGroupeSecondaires = new ArrayCollection();
        $this->intrigueHasLieus = new ArrayCollection();
        $this->intrigueHasDocuments = new ArrayCollection();
        $this->intrigueHasModifications = new ArrayCollection();
        $this->intrigueHasObjectifs = new ArrayCollection();
        $this->relectures = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \App\Entity\Intrigue
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of description.
     *
     * @param string $description
     * @return \App\Entity\Intrigue
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get the value of description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the value of titre.
     *
     * @param string $titre
     * @return \App\Entity\Intrigue
     */
    public function setTitre($titre)
    {
        $this->titre = $titre;

        return $this;
    }

    /**
     * Get the value of titre.
     *
     * @return string
     */
    public function getTitre()
    {
        return $this->titre;
    }

    /**
     * Set the value of text.
     *
     * @param string $text
     * @return \App\Entity\Intrigue
     */
    public function setText($text)
    {
        $this->text = $text;

        return $this;
    }

    /**
     * Get the value of text.
     *
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * Set the value of resolution.
     *
     * @param string $resolution
     * @return \App\Entity\Intrigue
     */
    public function setResolution($resolution)
    {
        $this->resolution = $resolution;

        return $this;
    }

    /**
     * Get the value of resolution.
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->resolution;
    }

    /**
     * Set the value of date_creation.
     *
     * @param \DateTime $date_creation
     * @return \App\Entity\Intrigue
     */
    public function setDateCreation($date_creation)
    {
        $this->date_creation = $date_creation;

        return $this;
    }

    /**
     * Get the value of date_creation.
     *
     * @return \DateTime
     */
    public function getDateCreation()
    {
        return $this->date_creation;
    }

    /**
     * Set the value of date_update.
     *
     * @param \DateTime $date_update
     * @return \App\Entity\Intrigue
     */
    public function setDateUpdate($date_update)
    {
        $this->date_update = $date_update;

        return $this;
    }

    /**
     * Get the value of date_update.
     *
     * @return \DateTime
     */
    public function getDateUpdate()
    {
        return $this->date_update;
    }

    /**
     * Set the value of state.
     *
     * @param string $state
     * @return \App\Entity\Intrigue
     */
    public function setState($state)
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Get the value of state.
     *
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Add IntrigueHasEvenement entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasEvenement $intrigueHasEvenement
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasEvenement(IntrigueHasEvenement $intrigueHasEvenement)
    {
        $this->intrigueHasEvenements[] = $intrigueHasEvenement;

        return $this;
    }

    /**
     * Remove IntrigueHasEvenement entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasEvenement $intrigueHasEvenement
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasEvenement(IntrigueHasEvenement $intrigueHasEvenement)
    {
        $this->intrigueHasEvenements->removeElement($intrigueHasEvenement);

        return $this;
    }

    /**
     * Get IntrigueHasEvenement entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasEvenements()
    {
        return $this->intrigueHasEvenements;
    }

    /**
     * Add IntrigueHasGroupe entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasGroupe $intrigueHasGroupe
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasGroupe(IntrigueHasGroupe $intrigueHasGroupe)
    {
        $this->intrigueHasGroupes[] = $intrigueHasGroupe;

        return $this;
    }

    /**
     * Remove IntrigueHasGroupe entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasGroupe $intrigueHasGroupe
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasGroupe(IntrigueHasGroupe $intrigueHasGroupe)
    {
        $this->intrigueHasGroupes->removeElement($intrigueHasGroupe);

        return $this;
    }

    /**
     * Get IntrigueHasGroupe entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasGroupes()
    {
        return $this->intrigueHasGroupes;
    }

    /**
     * Add IntrigueHasGroupeSecondaire entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasGroupeSecondaire $intrigueHasGroupeSecondaire
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasGroupeSecondaire(IntrigueHasGroupeSecondaire $intrigueHasGroupeSecondaire)
    {
        $this->intrigueHasGroupeSecondaires[] = $intrigueHasGroupeSecondaire;

        return $this;
    }

    /**
     * Remove IntrigueHasGroupeSecondaire entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasGroupeSecondaire $intrigueHasGroupeSecondaire
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasGroupeSecondaire(IntrigueHasGroupeSecondaire $intrigueHasGroupeSecondaire)
    {
        $this->intrigueHasGroupeSecondaires->removeElement($intrigueHasGroupeSecondaire);

        return $this;
    }

    /**
     * Get IntrigueHasGroupeSecondaire entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasGroupeSecondaires()
    {
        return $this->intrigueHasGroupeSecondaires;
    }

    /**
     * Add IntrigueHasLieu entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasLieu $intrigueHasLieu
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasLieu(IntrigueHasLieu $intrigueHasLieu)
    {
        $this->intrigueHasLieus[] = $intrigueHasLieu;

        return $this;
    }

    /**
     * Remove IntrigueHasLieu entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasLieu $intrigueHasLieu
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasLieu(IntrigueHasLieu $intrigueHasLieu)
    {
        $this->intrigueHasLieus->removeElement($intrigueHasLieu);

        return $this;
    }

    /**
     * Get IntrigueHasLieu entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasLieus()
    {
        return $this->intrigueHasLieus;
    }

    /**
     * Add IntrigueHasDocument entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasDocument $intrigueHasDocument
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasDocument(IntrigueHasDocument $intrigueHasDocument)
    {
        $this->intrigueHasDocuments[] = $intrigueHasDocument;

        return $this;
    }

    /**
     * Remove IntrigueHasDocument entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasDocument $intrigueHasDocument
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasDocument(IntrigueHasDocument $intrigueHasDocument)
    {
        $this->intrigueHasDocuments->removeElement($intrigueHasDocument);

        return $this;
    }

    /**
     * Get IntrigueHasDocument entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasDocuments()
    {
        return $this->intrigueHasDocuments;
    }
    /**
     * Add IntrigueHasModification entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasModification $intrigueHasModification
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasModification(IntrigueHasModification $intrigueHasModification)
    {
        $this->intrigueHasModifications[] = $intrigueHasModification;

        return $this;
    }

    /**
     * Remove IntrigueHasModification entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasModification $intrigueHasModification
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasModification(IntrigueHasModification $intrigueHasModification)
    {
        $this->intrigueHasModifications->removeElement($intrigueHasModification);

        return $this;
    }

    /**
     * Get IntrigueHasModification entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasModifications()
    {
        return $this->intrigueHasModifications;
    }

    /**
     * Add IntrigueHasObjectif entity to collection (one to many).
     *
     * @param \App\Entity\IntrigueHasObjectif $intrigueHasObjectif
     * @return \App\Entity\Intrigue
     */
    public function addIntrigueHasObjectif(IntrigueHasObjectif $intrigueHasObjectif)
    {
        $this->intrigueHasObjectifs[] = $intrigueHasObjectif;

        return $this;
    }

    /**
     * Remove IntrigueHasObjectif entity from collection (one to many).
     *
     * @param \App\Entity\IntrigueHasObjectif $intrigueHasObjectif
     * @return \App\Entity\Intrigue
     */
    public function removeIntrigueHasObjectif(IntrigueHasObjectif $intrigueHasObjectif)
    {
        $this->intrigueHasObjectifs->removeElement($intrigueHasObjectif);

        return $this;
    }

    /**
     * Get IntrigueHasObjectif entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIntrigueHasObjectifs()
    {
        return $this->intrigueHasObjectifs;
    }

    /**
     * Add Relecture entity to collection (one to many).
     *
     * @param \App\Entity\Relecture $relecture
     * @return \App\Entity\Intrigue
     */
    public function addRelecture(Relecture $relecture)
    {
        $this->relectures[] = $relecture;

        return $this;
    }

    /**
     * Remove Relecture entity from collection (one to many).
     *
     * @param \App\Entity\Relecture $relecture
     * @return \App\Entity\Intrigue
     */
    public function removeRelecture(Relecture $relecture)
    {
        $this->relectures->removeElement($relecture);

        return $this;
    }

    /**
     * Get Relecture entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRelectures()
    {
        return $this->relectures;
    }

    /**
     * Set User entity (many to one).
     *
     * @param \App\Entity\User $User
     * @return \App\Entity\Intrigue
     */
    public function setUser(User $User = null)
    {
        $this->User = $User;

        return $this;
    }

    /**
     * Get User entity (many to one).
     *
     * @return \App\Entity\User
     */
    public function getUser()
    {
        return $this->User;
    }

    public function __sleep()
    {
        return array('id', 'description', 'titre', 'text', 'resolution', 'date_creation', 'date_update', 'User_id', 'state');
    }
}