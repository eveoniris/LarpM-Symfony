<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2017-02-09 11:20:17.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * App\Entity\Ingredient
 *
 * @Table(name="ingredient")
 * @InheritanceType("SINGLE_TABLE")
 * @DiscriminatorColumn(name="discr", type="string")
 * @DiscriminatorMap({"base":"BaseIngredient", "extended":"Ingredient"})
 */
class BaseIngredient
{
    /**
     * @Id
     * @Column(type="integer")
     * @GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @Column(type="string", length=45)
     */
    protected $label;

    /**
     * @Column(type="text", nullable=true)
     */
    protected $description;

    /**
     * @Column(type="integer")
     */
    protected $niveau;

    /**
     * @Column(type="string", length=45)
     */
    protected $dose;

    /**
     * @OneToMany(targetEntity="GroupeHasIngredient", mappedBy="ingredient")
     * @JoinColumn(name="id", referencedColumnName="ingredient_id", nullable=false)
     */
    protected $groupeHasIngredients;

    /**
     * @OneToMany(targetEntity="PersonnageIngredient", mappedBy="ingredient")
     * @JoinColumn(name="id", referencedColumnName="ingredient_id", nullable=false)
     */
    protected $personnageIngredients;

    /**
     * @ManyToMany(targetEntity="Territoire", mappedBy="ingredients")
     */
    protected $territoires;

    public function __construct()
    {
        $this->groupeHasIngredients = new ArrayCollection();
        $this->personnageIngredients = new ArrayCollection();
        $this->territoires = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \App\Entity\Ingredient
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of label.
     *
     * @param string $label
     * @return \App\Entity\Ingredient
     */
    public function setLabel($label)
    {
        $this->label = $label;

        return $this;
    }

    /**
     * Get the value of label.
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Set the value of description.
     *
     * @param string $description
     * @return \App\Entity\Ingredient
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get the value of description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the value of niveau.
     *
     * @param integer $niveau
     * @return \App\Entity\Ingredient
     */
    public function setNiveau($niveau)
    {
        $this->niveau = $niveau;

        return $this;
    }

    /**
     * Get the value of niveau.
     *
     * @return integer
     */
    public function getNiveau()
    {
        return $this->niveau;
    }

    /**
     * Set the value of dose.
     *
     * @param string $dose
     * @return \App\Entity\Ingredient
     */
    public function setDose($dose)
    {
        $this->dose = $dose;

        return $this;
    }

    /**
     * Get the value of dose.
     *
     * @return string
     */
    public function getDose()
    {
        return $this->dose;
    }

    /**
     * Add GroupeHasIngredient entity to collection (one to many).
     *
     * @param \App\Entity\GroupeHasIngredient $groupeHasIngredient
     * @return \App\Entity\Ingredient
     */
    public function addGroupeHasIngredient(GroupeHasIngredient $groupeHasIngredient)
    {
        $this->groupeHasIngredients[] = $groupeHasIngredient;

        return $this;
    }

    /**
     * Remove GroupeHasIngredient entity from collection (one to many).
     *
     * @param \App\Entity\GroupeHasIngredient $groupeHasIngredient
     * @return \App\Entity\Ingredient
     */
    public function removeGroupeHasIngredient(GroupeHasIngredient $groupeHasIngredient)
    {
        $this->groupeHasIngredients->removeElement($groupeHasIngredient);

        return $this;
    }

    /**
     * Get GroupeHasIngredient entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getGroupeHasIngredients()
    {
        return $this->groupeHasIngredients;
    }

    /**
     * Add PersonnageIngredient entity to collection (one to many).
     *
     * @param \App\Entity\PersonnageIngredient $personnageIngredient
     * @return \App\Entity\Ingredient
     */
    public function addPersonnageIngredient(PersonnageIngredient $personnageIngredient)
    {
        $this->personnageIngredients[] = $personnageIngredient;

        return $this;
    }

    /**
     * Remove PersonnageIngredient entity from collection (one to many).
     *
     * @param \App\Entity\PersonnageIngredient $personnageIngredient
     * @return \App\Entity\Ingredient
     */
    public function removePersonnageIngredient(PersonnageIngredient $personnageIngredient)
    {
        $this->personnageIngredients->removeElement($personnageIngredient);

        return $this;
    }

    /**
     * Get PersonnageIngredient entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPersonnageIngredients()
    {
        return $this->personnageIngredients;
    }

    /**
     * Add Territoire entity to collection.
     *
     * @param \App\Entity\Territoire $territoire
     * @return \App\Entity\Ingredient
     */
    public function addTerritoire(Territoire $territoire)
    {
        $this->territoires[] = $territoire;

        return $this;
    }

    /**
     * Remove Territoire entity from collection.
     *
     * @param \App\Entity\Territoire $territoire
     * @return \App\Entity\Ingredient
     */
    public function removeTerritoire(Territoire $territoire)
    {
        $this->territoires->removeElement($territoire);

        return $this;
    }

    /**
     * Get Territoire entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTerritoires()
    {
        return $this->territoires;
    }

    public function __sleep()
    {
        return array('id', 'label', 'description', 'niveau', 'dose');
    }
}