<?php

/**
 * LarpManager - A Live Action Role Playing Manager
 * Copyright (C) 2016 Kevin Polez.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-08-25 15:17:56.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * App\Entity\CompetenceFamily.
 *
 * @Entity(repositoryClass="LarpManager\Repository\CompetenceFamilyRepository")
 */
class CompetenceFamily extends BaseCompetenceFamily implements \Stringable
{
    public static $LITTERATURE = 'Littérature';

    /**
     * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyFavorites")
     */
    protected $classeFavorites;

    /**
     * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyNormales")
     */
    protected $classeNormales;

    /**
     * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyCreations")
     */
    protected $classeCreations;

    public function __construct()
    {
        $this->classeFavorites = new ArrayCollection();
        $this->classeNormales = new ArrayCollection();
        $this->classeCreations = new ArrayCollection();

        parent::__construct();
    }

    public function __toString(): string
    {
        return $this->getLabel() ?? '';
    }

    /**
     * Surcharge pour gérer le cas ou le parent retourne une valeur null pour un String attendu.
     */
    public function getLabel(): string
    {
        return (string) $this->label;
    }

    /**
     * Surcharge pour gérer le cas ou le parent retourne une valeur null pour un String attendu.
     */
    public function getDescription(): string
    {
        return (string) $this->description;
    }

    /**
     * Fourni la compétence de premier niveau d'une famille de compétence.
     *
     * @return Competence $competenceFirst
     */
    public function getFirstCompetence()
    {
        $minimumIndex = null;
        $competenceFirst = null;

        foreach ($this->getCompetences() as $competence) {
            if (null == $minimumIndex) {
                $competenceFirst = $competence;
                $minimumIndex = $competence->getLevel()->getIndex();
            } elseif ($competence->getLevel()->getIndex() < $minimumIndex) {
                $competenceFirst = $competence;
                $minimumIndex = $competence->getLevel()->getIndex();
            }
        }

        return $competenceFirst;
    }

    /**
     * Fourni la compétence de plus haut niveau d'une famille de compétence.
     */
    public function getLastCompetence()
    {
        $maximumIndex = null;
        $competenceLast = null;

        foreach ($this->getCompetences() as $competence) {
            if (null == $maximumIndex) {
                $competenceLast = $competence;
                $maximumIndex = $competence->getLevel()->getIndex();
            } elseif ($competence->getLevel()->getIndex() > $maximumIndex) {
                $competenceLast = $competence;
                $maximumIndex = $competence->getLevel()->getIndex();
            }
        }

        return $competenceLast;
    }

    /**
     * Add Classe entity to collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function addClasseFavorite(Classe $classe): static
    {
        $this->classeFavorites[] = $classe;

        return $this;
    }

    /**
     * Remove Classe entity from collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function removeClasseFavorite(Classe $classe): static
    {
        $this->classeFavorites->removeElement($classe);

        return $this;
    }

    /**
     * Get Objet entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getClasseFavorites()
    {
        return $this->classeFavorites;
    }

    /**
     * Add Classe entity to collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function addClasseNormale(Classe $classe): static
    {
        $this->classeNormales[] = $classe;

        return $this;
    }

    /**
     * Remove Classe entity from collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function removeClasseNormale(Classe $classe): static
    {
        $this->classeNormales->removeElement($classe);

        return $this;
    }

    /**
     * Get Objet entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getClasseNormales()
    {
        return $this->classeNormales;
    }

    /**
     * Add Classe entity to collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function addClasseCreation(Classe $classe): static
    {
        $this->classeCreations[] = $classe;

        return $this;
    }

    /**
     * Remove Classe entity from collection.
     *
     * @return \App\Entity\CompetenceFamily
     */
    public function removeClasseCreation(Classe $classe): static
    {
        $this->classeCreations->removeElement($classe);

        return $this;
    }

    /**
     * Get Objet entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getClasseCreations()
    {
        return $this->classeCreations;
    }

    /**
     * Fourni la description débarassé de sa mise en forme.
     */
    public function getDescriptionRaw(): string
    {
        return strip_tags($this->getDescription());
    }
}
