<?php

/**
 * LarpManager - A Live Action Role Playing Manager
 * Copyright (C) 2016 Kevin Polez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-09-01 09:25:47.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use App\Entity\BasePost;

/**
 * App\Entity\Post
 *
 * @Entity(repositoryClass="LarpManager\Repository\PostRepository")
 */
class Post extends BasePost
{
	/**
	 * constructeur
	 */
	public function __construct()
	{
		parent::__construct();
		$this->setCreationDate(new \Datetime('NOW'));
		$this->setUpdateDate(new \Datetime('NOW'));
	}
	
	/**
	 * Fourni le nombre de vue de ce post
	 */
	public function getViews()
	{
		return $this->getPostViews()->count();
	}
	
	/**
	 * Fourni le post initial (ou a défaut lui-même)
	 */
	public function getAncestor()
	{
		if ( $this->getPost() )
		{
			return $this->getPost()->getAncestor();
		}
		return $this;
	}
	
	/**
	 * Fourni la dernière réponse (ou à défaut lui-même)
	 */
	public function getLastPost()
	{
		if ( $this->getPosts()->count() > 0 )
		{
			return $this->getPosts()->last();
		}
		
		return $this;	
	}
	
	/**
	 * Fourni tous les Users ayant répondu à ce post (ainsi que l'auteur initial)
	 */
	public function getWatchingUsers()
	{
		return $this->getUsers();
	}
	
	/**
	 * Ajoute un utilisateur dans la liste des utilisateurs qui surveillent le sujet
	 * Uniquement s'il n'est pas déjà dans la liste.
	 * @param unknown $User
	 */
	public function addWatchingUser($User)
	{
		foreach ($this->getWatchingUsers() as $u)
		{
			if ($u == $User) return $this;
		}
			
		return $this->addUser($User);
	}
	
	/**
	 * Retire un utilisateur de la liste des utilisateurs qui surveillent le sujet
	 * @param unknown $User
	 */
	public function removeWatchingUser($User)
	{
		return $this->removeUser($User);
	}
	
	/**
	 * Fourni l'auteur du post
	 */
	public function getUser()
	{
		return $this->getUserRelatedByUserId();
	}
	
	/**
	 * Met a jour l'auteur du post
	 * @param unknown $User
	 */
	public function setUser($User)
	{
		return $this->setUserRelatedByUserId($User);
	}
	
	/**
	 * Determine si le post est un post racine
	 */
	public function isRoot()
	{
		return ( $this->getPost() == null );
	}
			
}