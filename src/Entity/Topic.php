<?php

/**
 * LarpManager - A Live Action Role Playing Manager
 * Copyright (C) 2016 Kevin Polez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-09-01 09:25:47.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace App\Entity;

use App\Entity\BaseTopic;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * App\Entity\Topic
 *
 * @Entity(repositoryClass="LarpManager\Repository\TopicRepository")
 */
class Topic extends BaseTopic
{
	/**
	 * Constructeur
	 */
	public function __construct()
	{
		parent::__construct();
		$this->setCreationDate(new \Datetime('NOW'));
		$this->setUpdateDate(new \Datetime('NOW'));
	}
	
	/**
	 * Affichage d'un topic
	 */
	public function __toString()
	{
		return $this->getTitle();
	}
	
	/**
	 * Retourne la liste des topics classé par la date de publication de leurs posts
	 */
	public function getTopicsOrderByLastPost($app = null)
	{
		$topics = $this->getTopics();
		$iterator = $topics->getIterator();
		
		
		$iterator->uasort(function ($first, $second) use ($app) {
			if ($first === $second) {
				return 0;
			}
			$firstLastPost = $first->getLastPost($app);
			$secondLastPost = $second->getLastPost($app);
			if ($firstLastPost && $secondLastPost )
			{
				return (float) $firstLastPost->getCreationDate()->format("U.u") > (float) $secondLastPost->getCreationDate()->format("U.u") ? -1 : 1;
			}
			else if ( $firstLastPost) return -1;
			else return 1;
		});
		
		return new ArrayCollection(iterator_to_array($iterator));
	}
	
	/**
	 * Fourni la liste des posts d'un topic classé par date de publication (en prennant en compte les réponses)
	 */
	public function getPostsOrderByDate()
	{
		$posts = $this->getPosts();
		$iterator = $posts->getIterator();
		$iterator->uasort(function ($first, $second) {
			if ($first === $second) {
				return 0;
			}
			$first = $first->getLastPost();
			$second = $second->getLastPost();
			return (float) $first->getCreationDate()->format("U.u") > (float) $second->getCreationDate()->format("U.u") ? -1 : 1;
		});
		
		return new ArrayCollection(iterator_to_array($iterator));
	}
	
	/**
	 * Fourni le dernier post d'un topic (en recherchant dans les sous-topics)
	 */
	public function getLastPost($app = null)
	{
		$lastPost = null;
		
		foreach ( $this->getPosts() as $post )
		{
			$postChecked = $post->getLastPost();
			
			if ( $lastPost )
			{
				if ( $postChecked->getCreationDate() > $lastPost->getCreationDate() )
				{
					$lastPost = $postChecked;
				}
			}
			else
			{
				$lastPost = $postChecked->getLastPost();
			}
		}
		
		foreach ( $this->getTopics() as $topic)
		{
			if ( $app != null && ! $app['security']->isGranted('TOPIC_RIGHT', $topic) )
				continue;
			
			$topicLastPost = $topic->getLastPost($app);
			
			if ( $lastPost && $topicLastPost )
			{
				if ( $topicLastPost->getCreationDate() > $lastPost->getCreationDate() )
				{
					$lastPost = $topicLastPost; 
				}
			}
			else if ( $topicLastPost )
			{
				$lastPost = $topicLastPost;
			}
		}
		
		return $lastPost;
	}
	
	/**
	 * Fourni la liste de tous les ancêtres d'un topic
	 * @param unknown $array
	 */
	public function getAncestor($array = array())
	{
		if ( $this->getTopic() )
		{
			$array = $this->getTopic()->getAncestor($array);
			$array[] = $this->getTopic();
		}
		
		
		return $array;
	}
	
	/**
	 * Fourni le nombre de post dans ce topic et ces descendants.
	 */
	public function getPostCount()
	{
		$count = $this->getPosts()->count();
		foreach ( $this->getTopics() as $topic)
		{
			$count += $topic->getPostCount();
		}
		return $count;
	}
}